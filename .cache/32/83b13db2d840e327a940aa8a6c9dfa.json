{"id":"node_modules/bytes/index.js","dependencies":[{"name":"C:\\Users\\claud\\OneDrive\\Escritorio\\albertos\\web\\package.json","includedInParent":true,"mtime":1616123387184},{"name":"C:\\Users\\claud\\OneDrive\\Escritorio\\albertos\\web\\node_modules\\bytes\\package.json","includedInParent":true,"mtime":1616123386823}],"generated":{"js":"\n/**\n * Parse byte `size` string.\n *\n * @param {String} size\n * @return {Number}\n * @api public\n */\n\nmodule.exports = function(size) {\n  if ('number' == typeof size) return convert(size);\n  var parts = size.match(/^(\\d+(?:\\.\\d+)?) *(kb|mb|gb)$/)\n    , n = parseFloat(parts[1])\n    , type = parts[2];\n\n  var map = {\n      kb: 1 << 10\n    , mb: 1 << 20\n    , gb: 1 << 30\n  };\n\n  return map[type] * n;\n};\n\n/**\n * convert bytes into string.\n * \n * @param {Number} b - bytes to convert\n * @return {String}i\n * @api public\n */\n\nfunction convert (b) {\n  var gb = 1 << 30, mb = 1 << 20, kb = 1 << 10;\n  if (b >= gb) return (Math.round(b / gb * 100) / 100) + 'gb';\n  if (b >= mb) return (Math.round(b / mb * 100) / 100) + 'mb';\n  if (b >= kb) return (Math.round(b / kb * 100) / 100) + 'kb';\n  return b;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/bytes/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/bytes/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}}],"sources":{"node_modules/bytes/index.js":"\n/**\n * Parse byte `size` string.\n *\n * @param {String} size\n * @return {Number}\n * @api public\n */\n\nmodule.exports = function(size) {\n  if ('number' == typeof size) return convert(size);\n  var parts = size.match(/^(\\d+(?:\\.\\d+)?) *(kb|mb|gb)$/)\n    , n = parseFloat(parts[1])\n    , type = parts[2];\n\n  var map = {\n      kb: 1 << 10\n    , mb: 1 << 20\n    , gb: 1 << 30\n  };\n\n  return map[type] * n;\n};\n\n/**\n * convert bytes into string.\n * \n * @param {Number} b - bytes to convert\n * @return {String}i\n * @api public\n */\n\nfunction convert (b) {\n  var gb = 1 << 30, mb = 1 << 20, kb = 1 << 10;\n  if (b >= gb) return (Math.round(b / gb * 100) / 100) + 'gb';\n  if (b >= mb) return (Math.round(b / mb * 100) / 100) + 'mb';\n  if (b >= kb) return (Math.round(b / kb * 100) / 100) + 'kb';\n  return b;\n}"},"lineCount":39}},"error":null,"hash":"11fd7328256bc208c4c8a2742b11014c","cacheData":{"env":{}}}